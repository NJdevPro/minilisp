 (defmacro unless (condition expr)
      (list 'if condition () expr))
 (macroexpand (unless (= x 1) '(x is not 1)))
 (defmacro unless (condition expr)(list ('if condition () expr)))
(defun list (x . y)(cons x y))
 (defmacro unless (condition expr)(list ('if condition () expr)))
(defun list (x . y)(cons x y))
 (defmacro unless (condition expr)(list ('if condition () expr)))
(list 1 2 3)
(list '(1 2) 3)
(list (list 1 2) 3)
 (defmacro unless (condition expr)(list ('if condition () expr)))
(list (list 1 2) 3)
(list 3)
'(3)
(cons 1 2)
(+ (length '('hello 'world)) 44)
(if (> 3 2) (progn (println 'hello) (println 'yo)) (+ 2 3))
(if (> 3 2) (progn (println 'hello) (println 'yo) (println 'titi)) (+ 2 3))
(quote (hello world 1 2 3))
(quote (what is (going on) here?))
(define my-variable (quote hello))
(println my-variable)
(setq my-variable 43)
(println my-variable)
(defun sq(n) (* n n))
(sq 4)
sq
(defun list (x . y)(cons x y))
'(1 2 3 4)
(list 1 2 3 4)
(defun sq(n) (* n n))
(and () t)
(and t ())
(and t t t t t)
(and t t t ())
(and () ())
(or t t)
(or)
(or t ())
(or () ())
(or () () t)
(defun sq (n) (* n n))
(sq 5)
(defun sq (n) (* n n))
(sq 5)
(+ 1 1)
(reverse '( 1 2 3))
(reverse (1 2 3))
(reverse 1 2 3)
(reverse (list 1 2 3))
(reverse 1 2 3 4 5 6 7)
(reverse (1 2 3))
(reverse '(1 2 3))
(+ 1 1)
(list 1 2 3)
(iota 10)
(iota 100)
(+ 1 2)
(+ 1 1)
(hanoi 7)
(hanoi 9)
(hanoi 8)
(load "examples/test")
(load "examples/test.lisp")
(+ 1 1)
(load "examples/library.lisp")
(iota 1000)
(load "examples/library.lisp")
(iota 1000)
(iota 100)
(+ 1 1)
(iota 100)
(+ 1 1)
(+ 2 (+ 3 4))
(defun sq(n) (* n n))
(sq 5)
(* 5 (sq 5))
(* 3 4 5)
(* 3 4 (* 4 6))
(* 12 24)
(defun factorial (n) (if (= n 0) 1 (* n (factorial (- n 1))) ) )
(factorial 5)
(fact 12)
(fact 13)
(fact 14)
(fact 12)
q
